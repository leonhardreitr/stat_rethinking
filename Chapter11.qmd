---
title: "Chapter 11"
format: html
theme: cosmo
editor_options: 
  chunk_output_type: console
---

## Binomail regression

Binomial distribution

$$
y \sim Binomial(n,p)
$$

n = Versuche, p = Wahrscheinlichkeit erfolgreicher Versuch

zwei unterarten:
 - logistic regression: data im single trial format (outcome 0/1)
 - aggregierte binomial regression (outcome, 0 bis n)
 
```{r}
#| message: false
data(chimpanzees, package = "rethinking")
d <- chimpanzees
rm(chimpanzees)
library(tidyverse)
library(flextable)

d |> 
  distinct(prosoc_left, condition) |> 
  mutate(description = str_c(
    "Two food items on ", c(
      "rechts und kein partner",
      "links und kein partner",
      "rechts und partner",
      "links und partner"
    )
  )) |> 
  flextable() |> 
  width(width = c(1,1,4))

d <- 
  d |> 
  mutate(treatment = factor(1 + prosoc_left + 2 * condition)) |> 
  mutate(labels = factor(
    treatment,
    levels = 1:4,
    labels = c("r/n", "l/n", "r/p", "l/p")
  ))
  
d |> count(condition, treatment, prosoc_left)

library(brms)
b11.1 <-
  brm(data = d, 
      family = binomial,
      pulled_left | trials(1) ~ 1,
      prior(normal(0, 10), class = Intercept),
      seed = 11,
      sample_prior = T,
      file = "fits/b11.01")

b11.1 <- 
  brm(data = d,
      family = binomial,
      pulled_left | trials(1) ~ 1,
      prior(normal(0, 10), class = Intercept),
      seed = 11,
      sample_prior = T,
      file = "fits(b11.01)")
print(b11.1)

library(ggthemes)
library(wesanderson)

theme_set(
  theme_base(base_size = 12) +
    theme(text = element_text(family = "Times"),
          axis.text = element_text(family = "Times"),
          axis.ticks = element_line(linewidth = 0.25),
          axis.ticks.length = unit(0.1, "cm"),
          panel.background = element_rect(linewidth = 0.1),
          plot.background = element_blank(),
          )
  )

prior_draws(b11.1) |> 
  mutate(p = inv_logit_scaled(Intercept)) |> 
  
  ggplot(aes(x = p)) +
  geom_density(fill = "black",
               linewidth = 0, adjust = .1) +
  scale_y_continuous(NULL, breaks = NULL) +
  labs(x = "A prior probability to pull left")
```

Those priors are not really useful

```{r}
b11.1b <- 
  brm(data = d,
      family = binomial,
      pulled_left | trials(1) ~ 1,
      prior(normal(0, 1.5), class = Intercept),
      seed = 11,
      sample_prior = T,
      file = "fits(b11.01b)")
print(b11.1)

# wrangle
bind_rows(prior_draws(b11.1),
          prior_draws(b11.1b)) |> 
  mutate(p = inv_logit_scaled(Intercept),
         w = factor(rep(c(10, 1.5), each = n() / 2),
                    levels = c(10, 1.5))) |> 
  
  # plot
  ggplot(aes(x = p, fill = w)) +
  geom_density(linewidth = 0, alpha = 3/4, adjust = 0.1) +
  scale_fill_manual(expression(italic(w)), values = wes_palette("Moonrise2")[c(4, 1)]) +
  scale_y_continuous(NULL, breaks = NULL) +
  labs(title = expression(alpha%~%Normal(0*", "*italic(w))),
       x = "prior prob pull left")

bind_rows(
  prior_draws(b11.1),
  prior_draws(b11.1b)) |> 
  mutate(p = inv_logit_scaled(Intercept),
         w = factor(
           rep(c(10,1.5), each = n()/2),
           levels = c(10,1.5)
         )) |> 
  
  ggplot(aes(x = p, fill = w)) +
  geom_density(linewidth = 0,
               alpha = 3/4,
               adjust = .1) +
  scale_fill_manual(expression(italic(w)),
                    values = wes_palette("Moonrise2")[c(4,1)]) +
  scale_y_continuous(NULL, breaks = NULL) +
  labs(
    title = expression(alpha%~%Normal(0*", "*italic(w))),
    x = "A priori probability to pull the left lever"
  )

d <-
  d |> 
  mutate(actor = factor(actor))

b11.4 <- 
  brm(data = d, 
      family = binomial,
      bf(pulled_left | trials(1) ~ a + b,
         a ~ 0 + actor, 
         b ~ 0 + treatment,
         nl = TRUE),
      prior = c(prior(normal(0, 1.5), nlpar = a),
                prior(normal(0, 0.5), nlpar = b)),
      iter = 2000, warmup = 1000, chains = 4, cores = 4,
      seed = 11,
      file = "fits/b11.04")

b11.4 <- 
  brm(
    data = d,
    family = binomial,
    bf(pulled_left | trials(1) ~ a + b,
       a ~ 0 + actor,
       b ~ 0 + treatment,
       nl = TRUE),
    prior = c(prior(normal(0,1.5), nlpar = a),
              prior(normal(0,0.5), nlpar = b)),
    iter = 2000, warmup = 1000, chains = 4, cores = 4,
    seed = 99, file = "fits/b11.04"
  )

print(b11.4)
```

```{r}
library(tidybayes)

post <- as_draws_df(b11.4)

post |> 
  pivot_longer(contains("actor")) |> 
  mutate(probability = inv_logit_scaled(value),
         actor       = factor(str_remove(name, "b_a_actor"),
                              levels = 7:1)) |> 
  
  ggplot(aes(x = probability, y = actor)) +
  geom_vline(xintercept = .5, color = wes_palette("Moonrise2")[1], linetype = 3) +
  stat_pointinterval(.width = .95, size = 1/2,
                     color = wes_palette("Moonrise2")[4]) +
  scale_x_continuous(expression(alpha[actor]), limits = 0:1) +
  ylab(NULL) +
  theme(axis.ticks.y = element_blank())

tx <- c("R/N", "L/N", "R/P", "L/P")

post |> 
  select(contains("treatment")) |> 
  set_names("R/N","L/N","R/P","L/P") |> 
  pivot_longer(everything()) |>
  mutate(probability = inv_logit_scaled(value),
         treatment   = factor(name, levels = tx)) |> 
  mutate(treatment = fct_rev(treatment)) |> 
  
  ggplot(aes(x = value, y = treatment)) +
  geom_vline(xintercept = 0, color = wes_palette("Moonrise2")[2], linetype = 3) +
  stat_pointinterval(.width = .95, size = 1/2,
                     color = wes_palette("Moonrise2")[4]) +
  labs(x = expression(beta[treatment]),
       y = NULL) +
  theme(axis.ticks.y = element_blank())

post |> 
  select(contains("treatment")) |> 
  set_names("R/N","L/N","R/P","L/P") |> 
  pivot_longer(everything()) |> 
  mutate(p = inv_logit_scaled(value),
         treatment = factor(name, levels = tx)) |> 
  mutate(treatment = fct_rev(treatment)) |> 
  
  ggplot(aes(x = value, y = treatment)) +
  geom_vline(xintercept = 0,
             col = wes_palette("Royal1")[2], lty = 3) +
  stat_pointinterval(.width = .89,
                     size = .5,
                     col = wes_palette("Royal1")[3]) +
  labs(x = expression(beta[treatment]),
       y = NULL) +
  theme(axis.ticks.y = element_blank())
```


```{r}
post |> 
  mutate(db13 = b_b_treatment1 - b_b_treatment3,
         db24 = b_b_treatment2 - b_b_treatment4) |> 
  pivot_longer(db13:db24) |>
  mutate(diffs = factor(name, levels = c("db24", "db13"))) |> 
  
  ggplot(aes(x = value, y = diffs)) +
  geom_vline(xintercept = 0, color = wes_palette("Moonrise2")[2], linetype = 3) +
  stat_pointinterval(.width = .95, size = 1/2,
                     color = wes_palette("Moonrise2")[4]) +
  labs(x = "difference",
       y = NULL) +
  theme(axis.ticks.y = element_blank())

post |> 
  mutate(
    db13 = b_b_treatment1 - b_b_treatment3,
    db24 = b_b_treatment2 - b_b_treatment4
  ) |> 
  pivot_longer(db13:db24) |> 
  mutate(
    diffs = factor(name, levels = c("db24", "db13"))
  ) |> 
  
  ggplot(aes(x = value, y = diffs)) +
  geom_vline(xintercept = 0, col = "snow", lty = 3) +
  stat_pointinterval(.width = .89,
                     size = 1/2,
                     col = "#000000") +
  labs(x = "Difference", y = NULL) +
  theme(axis.ticks.y = element_blank())
```
 

```{r}
d |>
  group_by(actor, treatment) |>
  summarise(proportion = mean(pulled_left)) |> 
  filter(actor == 1)

d |> 
  summarise(prop = mean(pulled_left),
            .by = c(actor, treatment)) |> 
  filter(actor == 1)
```

```{r}
library(patchwork)
p1 <-
  d |>
  group_by(actor, treatment) |>
  summarise(proportion = mean(pulled_left)) |> 
  left_join(d |> distinct(actor, treatment, labels, condition, prosoc_left),
            by = c("actor", "treatment")) |> 
  mutate(condition = factor(condition)) |> 
  
  ggplot(aes(x = labels, y = proportion)) +
  geom_hline(yintercept = .5, color = wes_palette("Moonrise2")[3]) +
  geom_line(aes(group = prosoc_left),
            linewidth = 1/4, color = wes_palette("Moonrise2")[4]) +
  geom_point(aes(color = condition),
             size = 2.5, show.legend = F) + 
  labs(subtitle = "observed proportions")

p1 <- 
  d |> 
  summarise(proportion = mean(pulled_left),
            .by = c(actor, treatment)) |> 
  left_join(d |> distinct(actor, treatment, labels, condition, prosoc_left),
            by = c("actor", "treatment")) |> 
  mutate(condition = factor(condition)) |> 
  
  ggplot(aes(x = labels, y = proportion)) +
  geom_hline(yintercept = .5, col = "snow") +
  geom_line(aes(group = prosoc_left),
            lwd = 1/4, color = "#000000") +
  geom_point(aes(col = condition), size = 1.25 * 2, show.legend = F) +
  labs(subtitle = "Observed proportions")

nd <- 
  d |> 
  distinct(actor, treatment, labels, condition, prosoc_left)

p2 <-
  fitted(b11.4,
         newdata = nd) |> 
  data.frame() |> 
  bind_cols(nd) |> 
  mutate(condition = factor(condition)) |> 
  
  ggplot(aes(x = labels, y = Estimate, ymin = Q2.5, ymax = Q97.5)) +
  geom_hline(yintercept = .5, color = "snow") +
  geom_line(aes(group = prosoc_left),
            linewidth = 1/4, color = wes_palette("Moonrise2")[4]) +
  geom_pointrange(aes(color = condition),
                  fatten = 2.5, show.legend = F) + 
  labs(subtitle = "posterior predictions")


(p1 / p2) &
  scale_color_manual(values = wes_palette("Moonrise2")[c(2:1)]) &
  scale_y_continuous("proportion left lever", 
                     breaks = c(0, .5, 1), limits = c(0, 1)) &
  xlab(NULL) &
  theme(axis.ticks.x = element_blank(),
        panel.background = element_rect(fill = alpha("white", 1/10), linewidth = 0)) &
  facet_wrap(~ actor, nrow = 1, labeller = label_both)
```

```{r}
d <-
  d |> 
  mutate(side = factor(prosoc_left + 1),  # right 1, left 2
         cond = factor(condition + 1))    # no partner 1, partner 2

d_aggregated <-
  d %>%
  group_by(treatment, actor, side, cond) %>%
  summarise(left_pulls = sum(pulled_left)) %>% 
  ungroup()

d_aggregated %>%
  head(n = 8)

d_aggregated <- 
  d |> 
  group_by(treatment, actor, side, cond) |> 
  summarise(left_pulls = sum(pulled_left)) |> 
  ungroup()
```

```{r}
b11.6 <- 
  brm(data = d_aggregated, 
      family = binomial,
      bf(left_pulls | trials(18) ~ a + b,
         a ~ 0 + actor, 
         b ~ 0 + treatment,
         nl = TRUE),
      prior = c(prior(normal(0, 1.5), nlpar = a),
                prior(normal(0, 0.5), nlpar = b)),
      iter = 2000, warmup = 1000, chains = 4, cores = 4,
      seed = 11,
      file = "fits/b11.06")

b11.6 <- 
  brm(data = d_aggregated,
      family = binomial,
      bf(left_pulls | trials(18) ~ a + b,
         a ~ 0 + actor,
         b ~ 0 + treatment,
         nl = TRUE),
      prior = c(prior(normal(0,1.5), nlpar = a),
                prior(normal(0,0.5), nlpar = b)),
      iter = 2000, warmup = 1000, chains = 4, cores = 4,
      seed = 99, file = "fits/b11.06")
```

```{r}
# this is just for fancy annotation
text <-
  tibble(value = c(1.4, 2.6),
         name  = "b_a_actor7",
         fit   = c("b11.6", "b11.4"))

# rope in the posterior draws and wrangle
bind_rows(as_draws_df(b11.4),
          as_draws_df(b11.6)) %>% 
  mutate(fit = rep(c("b11.4", "b11.6"), each = n() / 2)) %>% 
  pivot_longer(b_a_actor1:b_b_treatment4) %>% 
  
  # plot
  ggplot(aes(x = value, y = name, color = fit)) +
  stat_pointinterval(.width = .95, size = 2/3,
                     position = position_dodge(width = 0.5)) +
  scale_color_colorblind() +
  geom_text(data = text,
            aes(label = fit),
            family = "Times", position = position_dodge(width = 2.25)) +
  labs(x = "posterior (log-odds scale)",
       y = NULL) +
  theme(axis.ticks.y = element_blank(),
        legend.position = "none")
```

```{r}
data(UCBadmit, package = "rethinking")
d <- UCBadmit
rm(UCBadmit)

print(d)

d <- 
  d %>%  
  mutate(gid  = factor(applicant.gender, levels = c("male", "female")),
         case = factor(1:n()))

d <- 
  d |> 
  mutate(gid = factor(applicant.gender,
                      levels = c("male", "female")),
         case = factor(1:n()))
```

$$
A \sim Binomial(N_i, p_i) \\
logit(p_i) = \alpha_{GID[i]} \\
\alpha_j \sim Normal(0,1.5)
$$

```{r}
b11.7 <- 
  brm(data = d,
      family = binomial,
      admit | trials(applications) ~ 0 + gid,
      prior = prior(normal(0,1.5), class = b),
      chains = 4, cores = 4, iter = 2000, warmup = 1000, file = "fits/b11.07")

print(b11.7)

b11.7 |> 
  as_draws_df() |> 
  mutate(diff_a = b_gidmale - b_gidfemale,
         diff_b = inv_logit_scaled(b_gidmale) - inv_logit_scaled(b_gidfemale)) |> 
  pivot_longer(starts_with("d")) |> 
  group_by(name) |> 
  mean_qi(value, .width = .89)
```

```{r}
p <- 
  predict(b11.7) |> 
  data.frame() |> 
  bind_cols(d)
text <- 
  d |> 
  summarise(case = mean(as.numeric(case)),
            admit = mean(admit/applications) + .5,
            .by = dept) 

p |> 
  ggplot(aes(x = case, y = admit / applications)) +
  geom_pointrange(aes(y    = Estimate / applications,
                      ymin = Q2.5     / applications ,
                      ymax = Q97.5    / applications),
                  color = "grey34",
                  shape = 1, alpha = 1/2) +
  geom_point(color = "black") +
  geom_line(aes(group = dept),
            color = "black") +
  geom_text(data = text,
            aes(y = admit, label = dept),
            color = "black",
            family = "serif") +
  scale_y_continuous("Proportion admitted", limits = 0:1) +
  ggtitle("Posterior validation check") +
  theme(axis.ticks.x = element_blank())
```

## poisson regression

Poisson = binomial ohne upper bound

$Np$ und Varianz $Np(1-p)$

```{r}
tibble(y = rbinom(1e5,1e3, 1/1e3)) |> 
  summarise(mean = mean(y),
            var = var(y))
```

MW und Varianz sind quasi ident, spezielle form der binomial verteilung namens poisson

$$
y \sim Poisson(\lambda)
$$
$\lambda$ ist der Erwartunngswert des Outcomes y und auch gleichzeitig die erwartete Varianz

Wir benutzen wieder log links als Link-Funktion

$$
y \sim Poisson(\lambda) \\
\log(\lambda_i) = \alpha + \beta_(x_i - \bar{x})
$$

```{r}
data(Kline, package = "rethinking")
d <- Kline
rm(Kline)
print(d)
```

minimun sample size = Anti bayesian lies. Wenn wir den Prior zurückbekommen, dann ist das sample zu klein, sonst nicht

```{r}
d <- 
  d |> 
  mutate(log_pop_std = (log(population) - mean(log(population))) / sd(log(population)),
         cid         = contact)

print(d)
```

```{r}
tibble(x = c(3,22),
       y = c(.055, .04),
       meanlog = c(0,3),
       sdlog = c(10, .5)) %>%
  expand_grid(number = seq(from = 0, to = 100, length.out = 200)) |> 
  mutate(density = dlnorm(number, meanlog, sdlog),
         group = str_c("alpha%~%Normal(", meanlog, ", ",sdlog, ")")) |> 
  
  ggplot(aes( fill = group, col = group)) +
  geom_area(aes(x = number, y = density),
            alpha = .75, lwd = 0, position = "identity") +
  geom_text(data = . %>% group_by(group) %>% slice(1),
            aes(x = x, y = y, label = group),
            family = "Times", parse = T,  hjust = 0) +
  scale_fill_colorblind() +
  scale_color_colorblind() +
  scale_y_continuous(NULL, breaks = NULL) +
  xlab("Mean number of tools") +
  theme(legend.position = "none")

n <- 100
a <- rnorm(n, 3, .05)
b <- rnorm(n, 0, 10)
plot(NULL, xlim = c(-2,2), ylim = c(0,100))

for (i in 1:n) curve(exp( a[i] + b[i]*x), add = T, col = "blue")

n <- 100
a <- rnorm(n, 3, .05)
b <- rnorm(n, 0, .2)
plot(NULL, xlim = c(-2,2), ylim = c(0,100))

for (i in 1:n) curve(exp( a[i] + b[i]*x), add = T, col = "blue")

set.seed(99)

prior <-
  tibble(i = 1:n,
         a = rnorm(n, mean = 3, sd = 0.5),
         b = rnorm(n, mean = 0, sd = 0.2)) |> 
  expand_grid(x = seq(from = log(100), to = log(200000), length.out = 100))

# left
p1 <-
  prior |> 
  ggplot(aes(x = x, y = exp(a + b * x), group = i)) +
  geom_line(linewidth = 1/4, alpha = 2/3,
            color = "grey32") +
  labs(subtitle = expression(beta%~%Normal(0*', '*0.2)),
       x = "log population",
       y = "total tools") +
  coord_cartesian(xlim = c(log(100), log(200000)),
                  ylim = c(0, 500))
# right
p2 <-
  prior |> 
  ggplot(aes(x = exp(x), y = exp(a + b * x), group = i)) +
  geom_line(linewidth = 1/4, alpha = 2/3,
            color = "#000000") +
  labs(subtitle = expression(beta%~%Normal(0*', '*0.2)),
       x = "population",
       y = "total tools") +
  coord_cartesian(xlim = c(100, 200000),
                  ylim = c(0, 500))

# combine
p1 | p2
```

```{r}
b11.8 <- 
  brm(data = d,
      family = poisson,
      total_tools ~ 1,
      prior(normal(3,0.5), class = Intercept),
      iter = 2000, warmup = 1e3, chains = 1+3, cores = 6 - 2,
      file = "fits/b11.08")

b11.9 <- 
  brm(data = d,
      family = poisson,
      bf(total_tools ~ a + b * log_pop_std,
         a + b ~ 0 + cid,
         nl = TRUE),
      prior = c(prior(normal(3, 0.5), nlpar = a),
                prior(normal(0, 0.2), nlpar = b)),
      prior(normal(3,0.5), class = Intercept),
      iter = 2000, warmup = 1e3, chains = 1+3, cores = 6 - 2,
      file = "fits/b11.09")

b11.8 <- add_criterion(b11.8, "loo")
b11.9 <- add_criterion(b11.9, "loo")

loo_compare(b11.8, b11.9, criterion = "loo") %>% print(simplify = F)

cultures <- c("Hawaii", "Tonga", "Trobriand", "Yap")

library(ggrepel)

nd <-
  distinct(d, cid) %>% 
  expand_grid(log_pop_std = seq(from = -4.5, to = 2.5, length.out = 100))

f <- 
  fitted(b11.9,
         newdata = nd,
         probs = c(.055, .945)) %>%
  data.frame() %>%
  bind_cols(nd)

p1 <-
  f %>%
  ggplot(aes(x = log_pop_std, group = cid, color = cid)) +
  geom_smooth(aes(y = Estimate, ymin = Q5.5, ymax = Q94.5, fill = cid),
              stat = "identity",
              alpha = 1/4, linewidth = 1/2) +
  geom_point(data = bind_cols(d, b11.9$criteria$loo$diagnostics),
             aes(y = total_tools, size = pareto_k),
             alpha = 4/5) +
  geom_text_repel(data = 
                    bind_cols(d, b11.9$criteria$loo$diagnostics) %>% 
                    filter(culture %in% cultures) %>% 
                    mutate(label = str_c(culture, " (", round(pareto_k, digits = 2), ")")),
                  aes(y = total_tools, label = label), 
                  size = 3, seed = 11, color = "black", family = "Times") +
  labs(x = "log population (std)",
       y = "total tools") +
  coord_cartesian(xlim = range(b11.9$data$log_pop_std),
                  ylim = c(0, 80))

p2 <-
  f %>%
  mutate(population = exp((log_pop_std * sd(log(d$population))) + mean(log(d$population)))) %>% 

  ggplot(aes(x = population, group = cid, color = cid)) +
  geom_smooth(aes(y = Estimate, ymin = Q5.5, ymax = Q94.5, fill = cid),
              stat = "identity",
              alpha = 1/4, linewidth = 1/2) +
  geom_point(data = bind_cols(d, b11.9$criteria$loo$diagnostics),
             aes(y = total_tools, size = pareto_k),
             alpha = 4/5) +
  scale_x_continuous("population", breaks = c(0, 50000, 150000, 250000)) +
  ylab("total tools") +
  coord_cartesian(xlim = range(d$population),
                  ylim = c(0, 80))

(p1 | p2) &
  scale_fill_manual(values = c("black", "grey32")) &
  scale_color_manual(values = c("forestgreen", "snow")) &
  scale_size(range = c(2, 5)) &
  theme(legend.position = "none")
```

## negative binomial

Viel unerklärte Varianz in einem Poisson Model
Grund: Unbobachte Einflüsse auf $\lambda$. Kann konfundieren, daher verwendet man oft eine negativ binomiale bzw. Gamma-poisson Verteilung. Ist einfach eine Mischung aus mehreren Poisson Verteilungen.

$\lambda$ ist der Erwartungswert eines Poisson-Models, kann aber auch oft die Rate sein.
Deswegen können wir auch Modelle bauen, in welchem die Rate von Fall zu Fall unterschiedlich ist

$\lambda = \mu/\tau$

daher

$$
y_i \sim Poisson(\mu_i) \\
log \mu_i=log \tau_i + \beta  x_i
$$
```{r}
set.seed(11)

num_days <- 30
y        <- rpois(num_days, lambda = 1.5)

num_weeks <- 4
y_new     <- rpois(num_weeks, lambda = 0.5 * 7)

(
  d <- 
  tibble(y         = c(y, y_new), 
         days      = rep(c(1, 7), times = c(num_days, num_weeks)),  # this is the exposure
         monastery = rep(0:1, times = c(num_days, num_weeks))) |> 
  mutate(log_days = log(days))
)

b11.12 <- 
  brm(data = d,
      family = poisson,
      y ~ 1 + offset(log_days) + monastery,
      prior = prior(normal(0,1), class = Intercept),
      prior(normal(0,1), class = b),
      chains = 4, cores = 4, iter = 2000, warmup = 1000, file = "fits/b11.12")

posterior_samples(b11.12) |> 
  mutate(lambda_old = exp(b_Intercept),
         lambda_new = exp(b_Intercept + b_monastery)) |> 
  pivot_longer(contains("lambda")) |> 
  mutate(name = factor(name, levels = c("lambda_old", "lambda_new"))) |> 
  group_by(name) |> 
  mean_hdi(value, .width = .89) |> 
  mutate_if(is.double, round, digits = 2)
```

## multinomiale und kategorische Modelle

```{r}
library(rethinking)

# simulate career choices among 500 individuals
n      <- 500           # number of individuals
income <- c(1, 2, 5)    # expected income of each career
score  <- 0.5 * income  # scores for each career, based on income

# next line converts scores to probabilities
p <- softmax(score[1], score[2], score[3])

# now simulate choice
# outcome career holds event type values, not counts
career <- rep(NA, n)  # empty vector of choices for each individual

# sample chosen career for each individual
set.seed(34302)
# sample chosen career for each individual
for(i in 1:n) career[i] <- sample(1:3, size = 1, prob = p)


code_m11.13 <- "
  data{
int N; 
int K;
int career[N];
vector[K] career_income;
  }

parameters{
vector[K-1] a;
real<lower=0> b;
}

model{
vector[K] p;
vector[K] s;
a ~ normal(0, 1);
b ~ normal(0, 0.5);
s[1] = a[1] + b*career_income[1];
s[2] = a[2] + b*career_income[2];
s[3] = 0;
p = softmax(s);
career ~categorical(p);
}"

dat_list <- list(N = n, K = 3, career = career, career_income = income)

m11.13 <- stan(model_code = code_m11.13, data = dat_list, chains = 4)

precis(m11.13, depth = 2)
```


## survival cats

```{r}
data(AustinCats, package = "rethinking")
d <- AustinCats
rm(AustinCats)

glimpse(d)

d |> 
  count(color) |> 
  slice(1:5)

d <- 
d |> 
  mutate(black = if_else(color == "Black", "black", "other"))

d |> 
  count(black) |> 
  mutate(per = 100 * n / sum(n)) |> 
  mutate(label = str_c(round(per, digits = 1),"%")) |> 
  
  ggplot(aes(y = black)) +
  geom_col(aes(x = n, fill = black)) +
  geom_text(aes(x = n - 250, label = label),
            color = "snow", family = "Times", hjust = 1) +
  scale_fill_manual(values = c("black", "grey34"), breaks = NULL) +
  scale_x_continuous(expression(italic(n)), breaks = c(0, count(d, black) |> pull(n))) +
  labs(title = "Cat color",
       y = NULL) +
  theme(axis.ticks.y = element_blank())

d <-
  d |> 
  mutate(adopted  = ifelse(out_event == "Adoption", 1, 0),
         censored = ifelse(out_event != "Adoption", 1, 0))

glimpse(d)
```

# Practise

## 11E1

```{r}
log_odds <- log(.35/(1-.35))
print(log_odds)
```

## 11E2

```{r}
exp(3.2)/(exp(3.2)+1)
```

## 11E3

```{r}
exp(1.7)
```

A one unit increase in the predictor increases the odds for the outcome occurring by the factor 5.5

## 11E4

Often not the count, but the duration is importan. For example if not all observation have been recoreded during the same time period

## 11M1

For the  aggregated form a likelihood for the multiplicative term of the formula exists.
In the unaggregated form the multiplicative term is missing and therefore also the likelihood


## 11M2


```{r}
exp(1.7)
```

It implies that a a 1.7 unit change in the predictor results in 5.5 times increase in the odds.
 
## 11M3

We need to map the the continious values of the linear model to the probability space constrained between 0 and 1. That's were the log link comes into play

## 11M4
Same as before

## 11M5

it would mean we know the maximum count. In those cases a binomial model maybe more appropiate.

## 11M6
Since a poisson model is a binomial model with an unkwon maximum, a large number of trial and a low rate of observing the event, both share the same constraints

- an dichotomous outcome
- constant probability of the event across all trials
